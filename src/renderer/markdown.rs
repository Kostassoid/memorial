use std::fmt::{Debug, Write};
use std::ops::Add;
use std::time::SystemTime;
use anyhow::Result;
use time::OffsetDateTime;
use crate::model::handle::HandlePart;
use crate::model::knowledge::KnowledgeTree;
use crate::renderer::Renderer;

struct MarkdownRenderer {
    title: String,
    link_prefix: String,
    version: String,
}

impl MarkdownRenderer {
    fn render_node(&self, rendered: &mut String, level: usize, node: &KnowledgeTree) -> Result<()> {
        for (hp, n) in node.children() {
            rendered.write_str(&format!(
                "{} <a id=\"{}\"></a> {}\n\n",
                "#".repeat(level),
                n.handle().as_url_safe_string(),
                hp,
            ))?;

            
            // todo: this

            self.render_node(rendered, level + 1, n)?;
        }

        Ok(())
    }
}

impl Renderer for MarkdownRenderer {
    fn render(&self, root: &KnowledgeTree) -> Result<String> {
        let mut rendered = String::new();

        rendered.write_str(&format!("# {}\n\n", self.title))?;

        self.render_node(&mut rendered, 2, root)?;

        rendered.write_str(&format!(
            "\n---\n<sub>Generated by [Posterity](https://github.com/Kostassoid/posterity) {} at {}.</sub>",
            &self.version,
            OffsetDateTime::from(SystemTime::now()).to_string(),
        ))?;

        Ok(rendered)
    }
}

#[cfg(test)]
mod test {
    use std::env;
    use crate::collector::collector::Collector;
    use crate::collector::file_matcher::FileTypeMatcher;
    use super::*;
    use crate::scanner::local::{LocalConfig, LocalFileScanner};
    use crate::parser::go::GoParser;

    // todo: don't have to use real files
    #[test]
    fn render_from_local_files() {
        let config = LocalConfig::new(
            env::current_dir().unwrap(),
            vec!("src/tests/**/*.go".into()),
            vec!("**/*bad*".into()),
        );

        let mut collector = Collector::new();
        collector.register_parser(FileTypeMatcher::Extension("go".to_string()), Box::new(GoParser {}));

        let scanner = LocalFileScanner::new(config).unwrap();
        collector.scan(&scanner).unwrap();

        let mut knowledge = collector.knowledge();

        // knowledge.visit_mut(|n: &mut KnowledgeTree| {
        //     Ok(())
        // }).unwrap();

        let renderer = MarkdownRenderer {
            title: "Nice Big Title".to_string(),
            link_prefix: "https://github.com/example/".to_string(),
            version: "v0.1.0".to_string(),
        };

        let rendered = renderer.render(knowledge).unwrap();
        println!("{}", rendered);
    }
}