name: CI/CD

permissions:
  contents: read
  packages: write

env:
  RUST_VERSION: "1.67.1"
  OUTPUT_PATH: "_out"
  CARGO: "cargo"
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  fmt:
    name: Ensure 'cargo fmt' has been run
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: cargo fmt -- --check

  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-pc-windows-gnu       , os: windows-2022 }
          - { target: x86_64-unknown-linux-musl   , os: ubuntu-22.04 , docker-push: true }
          - { target: x86_64-apple-darwin         , os: macos-11 }
          - { target: aarch64-apple-darwin        , os: macos-11     , skip-tests: true }
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=memorial-cli" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}

      - name: Show version information (Rust, cargo)
        shell: bash
        run: |
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Activate newest available Xcode
        if: contains(matrix.job.target, 'aarch64-apple-darwin')
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup macOS SDK for aarch64
        if: contains(matrix.job.target, 'aarch64-apple-darwin')
        shell: bash
        run: |
          xcodebuild -showsdks
          echo "SDKROOT=$(xcrun -sdk macosx12.1 --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx12.1 --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Build
        run: ${{ env.CARGO }} build --locked --release ${{ env.TARGET_FLAGS }}

      - name: Run tests
        if: ${{ !matrix.job.skip-tests }}
        run: ${{ env.CARGO }} test --locked ${{ env.TARGET_FLAGS }}

      - name: Run app
        if: ${{ !matrix.job.skip-tests }}
        run: ${{ env.CARGO }} run --locked ${{ env.TARGET_FLAGS }} -- --help

      - name: Check for release
        id: is-release
        shell: bash
        run: |
          unset IS_RELEASE ; if [[ $GITHUB_REF =~ ^refs/tags/v[0-9].* ]]; then IS_RELEASE='true' ; fi
          echo "IS_RELEASE=${IS_RELEASE}" >> "$GITHUB_OUTPUT"

      - name: Create tarball
        id: package
        if: steps.is-release.outputs.IS_RELEASE
        shell: bash
        run: |
          # Figure out suffix of binary
          EXE_suffix=""
          case ${{ matrix.job.target }} in
          *-pc-windows-*) EXE_suffix=".exe" ;;
          esac;
          BIN_NAME="${{ env.PROJECT_NAME }}${EXE_suffix}"
          
          PKG_suffix=".tar.gz" ; case ${{ matrix.job.target }} in *-pc-windows-*) PKG_suffix=".zip" ;; esac;
          PKG_BASENAME=${PROJECT_NAME}-v${PROJECT_VERSION}-${{ matrix.job.target }}
          PKG_NAME=${PKG_BASENAME}${PKG_suffix}
          echo "PKG_NAME=${PKG_NAME}" >> "$GITHUB_OUTPUT"
          
          PKG_STAGING="${{ env.OUTPUT_PATH }}/package"
          ARCHIVE_DIR="${PKG_STAGING}/${PKG_BASENAME}/"
          mkdir -p "${ARCHIVE_DIR}"
          
          # Binary
          cp "target/${{ matrix.job.target }}/release/${BIN_NAME}" "$ARCHIVE_DIR"
          
          # base compressed package
          pushd "${PKG_STAGING}/" >/dev/null
          case ${{ matrix.job.target }} in
            *-pc-windows-*) 7z -y a "${PKG_NAME}" "${PKG_BASENAME}"/* | tail -2 ;;
            *) tar czf "${PKG_NAME}" "${PKG_BASENAME}"/* ;;
          esac;
          popd >/dev/null
          
          # Let subsequent steps know where to find the compressed package
          echo "PKG_PATH=${PKG_STAGING}/${PKG_NAME}" >> "$GITHUB_OUTPUT"

      - name: "Artifact upload: tarball"
        uses: actions/upload-artifact@master
        if: steps.is-release.outputs.IS_RELEASE
        with:
          name: ${{ steps.package.outputs.PKG_NAME }}
          path: ${{ steps.package.outputs.PKG_PATH }}

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v1
        if: steps.is-release.outputs.IS_RELEASE
        with:
          files: |
            ${{ steps.package.outputs.PKG_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to the Container registry
        if: ${{ matrix.job.docker-push }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: ${{ matrix.job.docker-push }}
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        if: ${{ matrix.job.docker-push }}
        uses: docker/build-push-action@v4
        with:
          context: target/release
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
